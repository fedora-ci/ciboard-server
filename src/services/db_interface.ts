/*
 * This file is part of ciboard-server

 * Copyright (c) 2022 Andrei Stepanov <astepano@redhat.com>
 * 
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU Lesser General Public
 * License as published by the Free Software Foundation; either
 * version 3 of the License, or (at your option) any later version.
 * 
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * Lesser General Public License for more details.
 * 
 * You should have received a copy of the GNU Lesser General Public License
 * along with this program; if not, write to the Free Software Foundation,
 * Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.
 */

import _ from 'lodash';
import { getcfg } from '../cfg';
const cfg = getcfg();

/**
 * All artifacts are uniquelly identified by
 *
 * * artifact-type : string
 * * artifact-id : string
 *
 * List here all possible artifact-types:
 *
 * https://pagure.io/greenwave/blob/master/f/conf/subject_types
 * https://gitlab.cee.redhat.com/gating/greenwave-playbooks/-/blob/master/roles/greenwave/files/subject_types.yaml
 */
export type ArtifactTypes =
  /**
   * Builds from https://koji.fedoraproject.org/
   */
  | ArtifactTypeKojiBuild
  /**
   * Builds from https://copr.fedorainfracloud.org/
   */
  | 'copr-build'
  /**
   * Builds from https://brewweb.engineering.redhat.com/
   */
  | ArtifactTypeBrewBuild
  /**
   * PR from https://src.osci.redhat.com/
   */
  | ArtifactTypeDistGitPr
  /**
   * MBS builds from https://mbs.engineering.redhat.com/
   */
  | ArtifactTypeRedHatModule
  | ArtifactTypeFedoraModule
  /**
   * Composes produced by http://odcs.engineering.redhat.com/
   */
  | ArtifactTypeProductMDCompose
  /**
   * Builds from https://kojihub.stream.centos.org/koji/
   */
  | 'koji-build-cs'
  /*
   * Containers produced by https://brewweb.engineering.redhat.com/
   */
  | ArtifactTypeRedhatContainerImage;

export const atype_to_hub_map = {
  'koji-build': 'fedoraproject',
  'koji-build-cs': 'centos-stream',
};

export const getIndexName = (aType: string | undefined): string => {
  /**
   * Based on query:
   * GET _cat/indices/dev-*?v=true&s=index
   */
  const indexesPrefix = cfg.opensearch.indexes_prefix;
  let indexName;
  if (aType === 'brew-build') {
    indexName = 'redhat-rpm';
  } else if (aType === 'redhat-module') {
    indexName = 'redhat-module';
  } else if (aType === 'koji-build-cs') {
    indexName = 'centos-rpm';
  } else if (aType === 'koji-build') {
    indexName = 'fedora-rpm';
  } else if (aType === 'productmd-compose') {
    indexName = 'redhat-compose';
  } else if (aType === 'redhat-container-image') {
    indexName = 'redhat-container-image';
  } else if (aType === 'copr-build') {
    indexName = 'fedora-copr';
  } else if (aType === 'fedora-module') {
    indexName = 'redhat-module';
  }
  if (indexName) {
    return `${indexesPrefix}${indexName}`;
  }
  if (aType) {
    throw new Error(`[E] Cannot get index name for artifact type: ${aType}`);
  }
  return `${indexesPrefix}redhat-*,${indexesPrefix}fedora-*,${indexesPrefix}centos-*`;
};

export interface KaiState {
  /**
   * thread_id is copied thread_id from message or generated by KAI.
   */
  thread_id: string;
  /**
   * message_id is copied from message.
   * Used by KAI to check if this message already present in DB.
   * Mongodb has index for this field.
   */
  msg_id: string;
  /**
   * Version of schema broker message complays to.
   */
  version: string;
  /**
   * stage can be: 'build', 'dispatch', 'test', 'promote', etc....
   * derived from topic
   * stage (in standard called as `event`) is always the second item from the end of the topic
   * Examples:
   *
   * * pull-request.test.error -> test
   * * brew-build.promote.error -> promote
   **/
  stage: string;
  /**
   * state is always the latest part of the message
   * Examples:
   *
   *  * brew-build.promote.error -> error
   *  * brew-build.test.complete -> complete
   */
  state: string;
  /**
   * Derived from: generated_at
   * Example: 1616361381
   */
  timestamp: number;
  /**
   * processed
   */
  processed?: boolean;
  /**
   * origin
   */
  origin: {
    /**
     * Converted from pipeline message
     */
    creator: string;
    /**
     * kai
     */
    reason: string;
  };
  /**
   * Create, if possible, test case name.
   * The same name will have resultsdb:
   * https://pagure.io/fedora-ci/messages/blob/master/f/mappings/results/brew-build.test.complete.yaml#_5
   *
   *    name: "${body.test.namespace}.${body.test.type}.${body.test.category}"
   *
   * https://pagure.io/fedora-ci/messages/blob/master/f/schemas/test-common.yaml#_52
   *
   */
  test_case_name?: string;
}

/**
 * Artifact state - this is any kind of message, plus fields added during store phase
 */
export interface ArtifactState {
  /**
   * Block present for any kind of messages.
   */
  kai_state: KaiState;
  broker_msg_body: any;
  broker_extra?: any;
}

export interface PayloadBrewBuild {
  /** task id */
  task_id: string;
  /** 0ad-0.0.23b-13.fc33 */
  nvr: string;
  /** owner of the build */
  issuer: string;
  /** name from nvr */
  component: string;
  /** true or false or */
  scratch: boolean;
  /**
   * Gating tag. Example: rhel-8.1.0-gate
   */
  gate_tag_name?: string;
  /**
   * git://pkgs.devel.redhat.com/rpms/navilu-fonts?#937e7b088e82736a62d0b21cbb0f2e1299400b2e
   */
  source: string;
  build_id?: string;
}

/*
 * https://pagure.io/fedora-ci/messages/blob/master/f/schemas/redhat-container-image.yaml
 */
export interface PayloadContainerImage {
  id: string;
  nvr: string;
  tag?: string;
  name?: string;
  source?: string;
  issuer: string;
  task_id: number;
  build_id?: number;
  scratch: boolean;
  component: string;
  namespace?: string;
  full_names: string[];
  registry_url?: string;
  /*
   * Entries come from: VirtualTopic.eng.brew.build.complete
   * https://datagrepper.engineering.redhat.com/raw?topic=/topic/VirtualTopic.eng.brew.build.complete&delta=86400&contains=container_build
   */
  osbs_subtypes?: string[];
}

export interface PayloadRedHatModule {
  /** mbs id */
  mbs_id: string;
  nvr: string;
  issuer: string;
  nsvc: string;
  name: string;
  stream: string;
  version: string;
  context: string;
  source?: string;
  scratch?: boolean;
  gate_tag_name?: string;
}

export interface PayloadKojiBuild
  extends Omit<PayloadBrewBuild, 'gate_tag_name'> {}

export interface PayloadFedoraModule
  extends Omit<PayloadRedHatModule, 'gate_tag_name'> {}

export type TPayload =
  | PayloadKojiBuild
  | PayloadBrewBuild
  | PayloadDistGitPR
  | PayloadRedHatModule
  | PayloadFedoraModule
  | PayloadProductMDCompose;

export interface PayloadDistGitPR {
  uid: string;
  repository: string;
  comment_id: string;
  commit_hash: string;
  issuer: string;
}
export interface PayloadProductMDCompose {
  compose_id: string;
  /** nightly */
  compose_type: string;
  release_type?: string;
}

export interface ArtifactBaseModel {
  // XXX _id: ObjectId;
  _id: any;
  /**
   * Common for all artifact types
   */
  /**
   * Reqiured. MongoDB provides no out-of-the-box concurrency controls. For supporting concurrency is using a document version number.
   */
  _version: number;
  /** Updated at: iso 8601 string. */
  _updated: string;
  /** Required. RHEL-7.7-20190214.n.0 */
  aid: string;
  /** Required. copr-build */
  type: string;
  payload?: {};
  states: ArtifactState[];
  /** When the mongodb-document will be auto-removed, for example: scratch build */
  expire_at?: Date;
}

export type ArtifactTypeBrewBuild = 'brew-build';
export type ArtifactTypeKojiBuild = 'koji-build';
export type ArtifactTypeDistGitPr = 'dist-git-pr';
export type ArtifactTypeRedHatModule = 'redhat-module';
export type ArtifactTypeFedoraModule = 'fedora-module';
export type ArtifactTypeProductMDCompose = 'productmd-compose';
export type ArtifactTypeRedhatContainerImage = 'redhat-container-image';

export type ArtifactModelBrewBuild = ArtifactBaseModel & {
  type: ArtifactTypeBrewBuild;
  payload: PayloadBrewBuild;
};

export type ArtifactModelKojiBuild = ArtifactBaseModel & {
  type: ArtifactTypeKojiBuild;
  payload: PayloadKojiBuild;
};

export type ArtifactModelDistGitPR = ArtifactBaseModel & {
  type: ArtifactTypeDistGitPr;
  payload: PayloadDistGitPR;
};

export type ArtifactModelRedHatModule = ArtifactBaseModel & {
  type: ArtifactTypeRedHatModule;
  payload: PayloadRedHatModule;
};

export type ArtifactModelFedoraModule = ArtifactBaseModel & {
  type: ArtifactTypeFedoraModule;
  payload: PayloadFedoraModule;
};

export type ArtifactModelProductMDCompose = ArtifactBaseModel & {
  type: ArtifactTypeProductMDCompose;
  payload: PayloadProductMDCompose;
};

export type ArtifactModelRedhatContainerImage = ArtifactBaseModel & {
  type: ArtifactTypeRedhatContainerImage;
  payload: PayloadContainerImage;
};

export type ArtifactModel =
  | ArtifactModelBrewBuild
  | ArtifactModelKojiBuild
  | ArtifactModelDistGitPR
  | ArtifactModelRedHatModule
  | ArtifactModelFedoraModule
  | ArtifactModelProductMDCompose
  | ArtifactModelRedhatContainerImage;

/**
 * TypeScript guards
 */
export function isArtifactBrewBuild(
  artifact: ArtifactModel,
): artifact is ArtifactModelBrewBuild {
  return artifact.type === 'brew-build';
}
export function isArtifactRedHatModule(
  artifact: ArtifactModel,
): artifact is ArtifactModelRedHatModule {
  return artifact.type === 'redhat-module';
}
export function isArtifactCompose(
  artifact: ArtifactModel,
): artifact is ArtifactModelProductMDCompose {
  return artifact.type === 'productmd-compose';
}
export function isArtifactRedHatContainerImage(
  artifact: ArtifactModel,
): artifact is ArtifactModelRedhatContainerImage {
  return artifact.type === 'redhat-container-image';
}

export interface MetadataModel {
  /* internal id for ci-system entry */
  // XXX _id: ObjectId;
  _id: any;
  /**
   * Reqiured. MongoDB provides no out-of-the-box concurrency controls. For supporting concurrency is using a document version
   */
  _version: number;
  /* Updated at: iso 8601 string. */
  _updated: string;
  /* Tracks who made contributions to this testcase. */
  _update_history: { time: string; author: string }[];
  /*
   * ResultsDB testcase. Adresses specific CI-system.
   * A CI or other testing system that would like to discover, stage and invoke tests for a test subject.
   * Takes priority over `testcase_name_regex`
   */
  testcase_name?: string;
  /*
   * ResultsDB testcase regex.
   * https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Regular_Expressions
   */
  testcase_name_is_regex?: boolean;
  /* metadata product-version */
  product_version: string;
  /* metadata priority */
  priority: number;
  /* Payload according to schema file. */
  payload: any;
}

export interface ComponentsModel {
  // XXX _id: ObjectId;
  _id: any;
  /**
   * Reqiured. MongoDB provides no out-of-the-box concurrency controls. For supporting concurrency is using a document version
   */
  _version: number;
  /** Updated at: iso 8601 string. */
  _updated: string;
  /** Red Hat Enterprise Linux 9 == 604 */
  product_id: number;
  /** ds-qe-bugs@redhat.com */
  qa_contact: string;
  /** 389 Directory Server (base) */
  description: string;
  /** svashisht@redhat.com */
  def_assignee: string;
  /** agile_sprint */
  sst_team_name: string;
  /** Required. bash */
  component_name: string;
  /** Karel Volný */
  qa_contact_name: string;
  /** Siteshwar Vashisht */
  def_assignee_name: string;
}
